name: Build and Deploy Docker Images

on:
  push:
    branches:
      - master  # Trigger the action when pushing to the main branch
  pull_request:
    branches:
      - master  # Trigger the action on pull requests to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Runs the job on the latest Ubuntu GitHub-hosted runner

    steps:
    # Step 1: Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Docker Buildx (optional, but recommended for modern Docker builds)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Log in to Docker Hub (you need to store Docker Hub credentials as GitHub secrets)
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 4: Build the Docker image using the Dockerfile
    - name: Build Docker image
      run: |
        docker build -t amanharsora543211/project:${{ github.sha }} .

    # Step 5: Push the Docker image to Docker Hub
    - name: Push Docker image to Docker Hub
      run: |
        docker push amanharsora543211/project:${{ github.sha }}



    # Step 6: Deploy the Docker container to the target server (e.g., AWS, DigitalOcean, etc.)
    # This example uses SSH to deploy on a remote server (you must set up SSH keys as GitHub Secrets)
    - name: Deploy to Remote Server via SSH
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.SERVER_HOST }}  # Your server's IP or domain name
        username: ${{ secrets.SERVER_USER }}  # The SSH username
        key: ${{ secrets.SERVER_SSH_KEY }}  # The private SSH key for authentication
        port: 22
        script: |
          # Pull the latest Docker image from Docker Hub (if pushing to Docker Hub)
          docker pull amanharsora543211/project:${{ github.sha }}
          
          # Stop and remove any running containers (if necessary)
          docker stop my-web-app || true
          docker rm my-web-app || true
          
          # Run the Docker container (you can customize ports and volumes as needed)
          docker run -d -p 80:80 --name my-web-app amanharsora543211/project:${{ github.sha }}
